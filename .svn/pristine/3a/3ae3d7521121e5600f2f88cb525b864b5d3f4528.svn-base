package com.ybt.web.controller.manager;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.cxf.common.util.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.jiufengxinxi.core.entity.JsonResult;
import com.jiufengxinxi.core.enums.EAclLevel;
import com.jiufengxinxi.core.query.ListPropertyFilter;
import com.jiufengxinxi.core.query.Page;
import com.jiufengxinxi.core.query.PropertyFilter.MatchType;
import com.jiufengxinxi.utils.MD5;
import com.ybt.base.entity.Member;
import com.ybt.base.entity.ProxyArea;
import com.ybt.base.entity.UrlAuthority;
import com.ybt.base.service.IMemberService;
import com.ybt.base.service.IProxyAreaService;
import com.ybt.base.service.IUrlAuthorityService;
import com.ybt.web.controller.base.SimpleController;
import com.ybt.web.util.AppUtil;
import com.ybt.web.util.Constants;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Controller
@RequestMapping(value="/manager/proxy")
public class ProxyManagerController extends SimpleController {

	@Resource
	private IProxyAreaService proxyAreaService;
	
	@Resource
	private IMemberService memberService;
	
	@Resource
	private IUrlAuthorityService urlAuthorityService;
	
	
	@RequestMapping(value="list",description="代理列表")
	public ModelAndView list(String mtype,Date startDate,Date endDate){		
		ModelAndView mv = new ModelAndView();
		mv.setViewName("manager/proxy/list");
		return mv;		
	}
	
	@RequestMapping(value="pageFromProxy",description="代理加载列表")
	public ModelAndView pageFromProxy(String mtype,Date startDate,Date endDate,int currentPage){
		ModelAndView mv = new ModelAndView();
		mv.setViewName("manager/proxy/load");
		ListPropertyFilter filters = ListPropertyFilter.getInstance();
		if(startDate!=null){
			filters.addFilter("addTime", startDate,MatchType.GE);
			mv.addObject("startDate",startDate);
		}
		if(endDate!=null){
			filters.addFilter("addTime", endDate,MatchType.LE);
			mv.addObject("endDate",endDate);
		}
		
		Page<ProxyArea> page=new Page<ProxyArea>();
		page.setCurrentPage(currentPage);
		page.setPageSize(10);
		page.setOrderBy("addTime");
		page.setOrder("desc");
		//List<Message> list = messageService.findByFilters(filters);	
		page=proxyAreaService.findPagesByFilters(page, filters);
		mv.addObject("page", page);
		return mv;
	}
	
	@RequestMapping(value="create",description="创建代理")
	public ModelAndView create(){		
		
		return edit(null);		
	}
	
	@RequestMapping(value="edit",description="编辑代理")
	public ModelAndView edit(Long id){
		ModelAndView mv = new ModelAndView();
		mv.setViewName("manager/proxy/edit");
		ProxyArea proxyArea=null;
		if(id==null){
			proxyArea=new ProxyArea();
		}else{
			proxyArea=proxyAreaService.findById(id);
		}
		Member member=null;
		if(id==null){
			member=new Member();
		}else{
			member=memberService.findById(proxyArea.getManagerId());
		}
		mv.addObject("proxyArea", proxyArea);
		mv.addObject("member", member);
		List<String> aus=null;
		if(StringUtils.isEmpty(proxyArea.getAuths())){
			aus=new ArrayList<String>();
		}else{
			aus=Arrays.asList(proxyArea.getAuths().split(","));
		}
		List<UrlAuthority> auths=urlAuthorityService.findByFilters(ListPropertyFilter.getInstance().addFilter("enable", true, MatchType.EQ));
		JSONArray array=new JSONArray();
		for(UrlAuthority u:auths){
			JSONObject ob=new JSONObject();
			ob.put("id", String.valueOf(u.getId()));
			ob.put("pId", u.getParentid());
			ob.put("name", u.getName());
			ob.put("open", true);
			if(proxyArea.getAuths()!=null&&aus.contains(String.valueOf(u.getId()))){
				ob.put("checked", true);
			}
			
			array.add(ob);
		}
		mv.addObject("json", array.toString());
		
		return mv;		
	}
	
	
	@RequestMapping(value="save",description="保存代理")
	public ModelAndView save(HttpServletRequest request,RedirectAttributes redirectAttributes,Long proxyid,String memberid){		
		ModelAndView mv = new ModelAndView(Constants.REDIRECT+"/manager/proxy/list.htm");
		Member member=null;
		ProxyArea proxyArea=null;
		
		if(proxyid==null){
			proxyArea=new ProxyArea();
		}else{
			proxyArea=proxyAreaService.findById(proxyid);
		}
		this.bindValidateRequestEntity(request, proxyArea);
		addOrModifyUserInfo(request, proxyArea);

		
		if(StringUtils.isEmpty(memberid)){
			member=new Member();
			member.setAdmin(true);
			member.setAreaProxy(true);
			member.setName(proxyArea.getName());
			member.setState(1);
		}else{
			member=memberService.findById(memberid);
		}
		this.bindValidateRequestEntity(request, member);
		addOrModifyUserInfo(request, member);
		
		if(StringUtils.isEmpty(memberid)){
			member.setLgpassword(MD5.md5(member.getLgpassword()));
			member.setPaypassword(MD5.md5(member.getPaypassword()));
		}
		if(!proxyAreaService.saveProxy(proxyArea, member)){
			return new ModelAndView(Constants.REDIRECT+"/manager/proxy/create.htm");
		}
		redirectAttributes.addFlashAttribute(MESSAGE_NAME, "保存成功");
		return mv;		
	}
	
	@RequestMapping(value="hasProxyCode",description="检验代理编号",aclLevel=EAclLevel.WHITE)
	@ResponseBody
	public Object hasProxyCode(String id,String proxyCode,String old){
		try{
			if(proxyAreaService.isUnique(old, "proxyCode", proxyCode)){
				return AppUtil.returnObject(JsonResult.success());
			}
		} catch(Exception e){
			e.printStackTrace();
		}
		return AppUtil.returnObject(JsonResult.fail());
	}
}
